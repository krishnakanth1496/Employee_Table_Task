# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import employee_pb2 as employee__pb2


class EmployeeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertEmployee = channel.unary_unary(
                '/Employee/InsertEmployee',
                request_serializer=employee__pb2.InsertEmployeeRequest.SerializeToString,
                response_deserializer=employee__pb2.InsertEmployeeResponse.FromString,
                )


class EmployeeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertEmployee,
                    request_deserializer=employee__pb2.InsertEmployeeRequest.FromString,
                    response_serializer=employee__pb2.InsertEmployeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Employee', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Employee(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Employee/InsertEmployee',
            employee__pb2.InsertEmployeeRequest.SerializeToString,
            employee__pb2.InsertEmployeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DeleteEmployeeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeleteEmployee = channel.unary_unary(
                '/DeleteEmployee/DeleteEmployee',
                request_serializer=employee__pb2.DeleteEmployeeRequest.SerializeToString,
                response_deserializer=employee__pb2.DeleteEmployeeResponse.FromString,
                )


class DeleteEmployeeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DeleteEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeleteEmployeeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeleteEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmployee,
                    request_deserializer=employee__pb2.DeleteEmployeeRequest.FromString,
                    response_serializer=employee__pb2.DeleteEmployeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DeleteEmployee', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeleteEmployee(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DeleteEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DeleteEmployee/DeleteEmployee',
            employee__pb2.DeleteEmployeeRequest.SerializeToString,
            employee__pb2.DeleteEmployeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UpdateEmployeeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateEmployee = channel.unary_unary(
                '/UpdateEmployee/UpdateEmployee',
                request_serializer=employee__pb2.UpdateEmployeeRequest.SerializeToString,
                response_deserializer=employee__pb2.UpdateEmployeeResponse.FromString,
                )


class UpdateEmployeeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateEmployeeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmployee,
                    request_deserializer=employee__pb2.UpdateEmployeeRequest.FromString,
                    response_serializer=employee__pb2.UpdateEmployeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UpdateEmployee', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpdateEmployee(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UpdateEmployee/UpdateEmployee',
            employee__pb2.UpdateEmployeeRequest.SerializeToString,
            employee__pb2.UpdateEmployeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SelectEmployeeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SelectEmployee = channel.unary_unary(
                '/SelectEmployee/SelectEmployee',
                request_serializer=employee__pb2.SelectEmployeeRequest.SerializeToString,
                response_deserializer=employee__pb2.SelectEmployeeResponse.FromString,
                )


class SelectEmployeeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SelectEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SelectEmployeeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SelectEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectEmployee,
                    request_deserializer=employee__pb2.SelectEmployeeRequest.FromString,
                    response_serializer=employee__pb2.SelectEmployeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SelectEmployee', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SelectEmployee(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SelectEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SelectEmployee/SelectEmployee',
            employee__pb2.SelectEmployeeRequest.SerializeToString,
            employee__pb2.SelectEmployeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
